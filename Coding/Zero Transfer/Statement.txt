def mul(x, y)
  if x < 0 && y >= 0 {
    return -x + mul(-x, y - 1)
  } else if x < 0 && y < 0 {
    return -x + mul(-x, (-y) - 1)
  } else if x >= 0 && y < 0 {
    return x + mul(x, (-y) - 1)
  } else if x == 0 || y == 0 {
    return 0
  } else if x == 1 {
    return y
  } else if y == 1 {
    return x
  } else {
    x + mul(x, y - 1)
  }

mul(2, -3)

You are given an array of integers, of length N, where
the sum of the elements is zero. Write an algorithm that makes all elements of
the list zero, modifying the array only with the transfer function (you can read
the array in any way you like), where the transfer function has three
parameters: source index, destination index, and amount. It subtracts amount
from the source index and adds amount to the destination index. During the
transfers, the sign of each element must not change.

def transfer(arr, from, to, amount):
    assert arr[from] < 0 or amount <= arr[from]
    assert arr[to] > 0 or amount <= -arr[to]
    arr[from] -= amount
    arr[to] += amount

def swap(arr, i, j) -> (Index, Index)
    if arr[i] == 0 {
      j, j + 1
    } else if arr[j] == 0 {
      i, j + 1
    } else if is_neg(arr[i]) && is_neg(arr[j]) {
      swap(arr, i, j + 1)
    } else if is_pos(arr[i]) && is_pos(arr[j]) {
      src = i if arr[i] < arr[j] else j
      dst = j if arr[i] < arr[j] else i
      amt = arr[src]

      transfer(arr, src, dst, amt)

      return (i, j + 1) if arr[i] > 0 else (j, j + 1)
    } else if is_neg(arr[i]) {
      transfer(arr, j, i, abs(arr[j] - abs(arr[i])))
      return (i, j + 1) if arr[i] < 0 else (j, j + 1)
    } else if is_neg(arr[j]) {
      transfer(arr, i, j, abs(arr[i] - abs(arr[j])))
      return (j, j + 1) if arr[j] > 0 else (i, j + 1)
    }

[ -3, 2, 1 ]

i = -2, j = 1
i = -2, j = 3 → i = -1, j = 2
i = -2, j = 2 → i = -2, j = 2

transfer(arr, 0, 1, 2)
2 4 1 -2 3 -8
0 6 ...
0 0 7 ...
0 0 7  0 1  ..

-8 -2 | 1 2 3 4
0 -10 | 0 0 0 10
-10 10


0 2 ...
0 1 0 -2
