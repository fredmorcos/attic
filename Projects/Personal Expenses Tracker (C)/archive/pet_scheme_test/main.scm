(define pet-version "0.2")
(define pet-desc "Personal Expense Tracker")
(define pet-www "https://github.com/fredmorcos/pet.git")
(define pet-cc "Copyright (c) 2012-2013")
(define pet-author "Fred Morcos")
(define pet-email "fred.morcos@gmail.com")

(define (filter p tmp-xs)
  (define (filter-help xs acc)
    (if (null? xs)
        (reverse acc)
        (let ((head (car xs))
              (tail (cdr xs)))
          (if (p head)
              (filter-help tail (cons head acc))
              (filter-help tail acc)))))
  (filter-help tmp-xs '()))

(define (print-version)
  (print "PET Version" " " pet-version " -- " pet-desc)
  (print pet-www)
  (print pet-cc " -- " pet-author " " "<" pet-email ">"))

(define (print-help)
  (print-version)
  (print)
  (print "TODO: Print help here."))

(define (cmdline-exec xs)
  (print "TODO: Implement this."))

(define (has-help? xs)
  (> (length (filter (lambda (x) (or (string=? x "-h")
                                     (string=? x "--help"))) xs)) 0))

(define (has-version? xs)
  (> (length (filter (lambda (x) (or (string=? x "-V")
                                     (string=? x "--version"))) xs)) 0))

(let ((cmdline-argv (command-line-arguments)))
  (cond ((null? cmdline-argv) (print-help))
        ((has-help? cmdline-argv) (print-help))
        ((has-version? cmdline-argv) (print-version))
        (else cmdline-exec cmdline-argv)))
