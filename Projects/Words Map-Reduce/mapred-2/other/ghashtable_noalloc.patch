diff --git a/Makefile b/Makefile
index 2b15bc8..79df55c 100644
--- a/Makefile
+++ b/Makefile
@@ -157,6 +157,10 @@ CFLAGS_SAN_THREAD += -fsanitize=thread
 LDFLAGS_RELEASE += -flto
 LDFLAGS         += -lpthread
 
+# Dependencies
+CFLAGS  += $(shell pkg-config --cflags glib-2.0)
+LDFLAGS += $(shell pkg-config --libs glib-2.0)
+
 SRC   = mapred.c
 OBJS  = mapred.o
 OBJS += mapred_debug.o
diff --git a/mapred.c b/mapred.c
index 4df046f..2d7f894 100644
--- a/mapred.c
+++ b/mapred.c
@@ -98,6 +98,7 @@
 #include <time.h>
 #include <sys/stat.h>
 #include <sys/time.h>
+#include <glib.h>
 
 struct time_info {
   clock_t begin_cpu;
@@ -176,9 +177,8 @@ struct word {
 };
 
 struct count_params {
+  GHashTable *words;            /* List of words. */
   char *buf_ptr;                /* Nul-terminated buffer. */
-  struct word *words;           /* List of accumulated words. */
-  size_t n;                     /* Number of accumulated words. */
   int tl_errno;                 /* Thread-local errno. */
 };
 
@@ -187,15 +187,10 @@ typedef int (*cmpfunc)(const void *, const void *);
 typedef void *(*tfunc)(void *);
 
 /* Prototypes. */
-int wordcmp(const struct word *w1, const struct word *w2);
 int countcmp(const struct word *w1, const struct word *w2);
 struct count_params *count(struct count_params *const params);
-struct count_params *reduce(const size_t n, struct count_params *const ps);
-
-/* Compare two words. */
-int wordcmp(const struct word *w1, const struct word *w2) {
-  return strcmp(w1->ptr, w2->ptr);
-}
+void merge (gpointer key, gpointer value, gpointer user_data);
+void reduce(const size_t n, struct count_params *const ps);
 
 /* Compare two words according to their occurrences. */
 int countcmp(const struct word *w1, const struct word *w2) {
@@ -206,7 +201,7 @@ int countcmp(const struct word *w1, const struct word *w2) {
     /* Return 0 instead of `return wordcmp(w1, w2)` because the list
      * should already be sorted by word (for the bsearch() calls).
      */
-    return 0;
+    return strcmp(w1->ptr, w2->ptr);
   } else if (w1->occ > w2->occ) {
     return -1;
   } else {
@@ -217,6 +212,8 @@ int countcmp(const struct word *w1, const struct word *w2) {
 struct count_params *count(struct count_params *const params) {
   typedef unsigned char uchar;
 
+  params->words = g_hash_table_new(g_str_hash, g_str_equal);
+
   while (true) {
     /* Nullify any spaces and punctuation. */
     while (*params->buf_ptr != '\0' && !isalnum((uchar) *params->buf_ptr)) {
@@ -249,111 +246,39 @@ struct count_params *count(struct count_params *const params) {
       params->buf_ptr++;
     }
 
-    /* Refer to an already existing copy of the word in `w` - the one
-     * just uncovered - in case it can be found in the accumulated
-     * list of words.
-     */
-    struct word *found = NULL;
+    gpointer *occ = g_hash_table_lookup(params->words, w.ptr);
 
-    if (params->words != NULL) {
-      /* The list of words is not empty, do the search. */
-      found = bsearch(&w.ptr,
-                      params->words,
-                      params->n,
-                      sizeof(struct word),
-                      (cmpfunc) wordcmp);
-    }
-
-    if (found != NULL) {
-      /* Increment the occurrence of the instance in the list and move
-       * on to reading the next word from the buffer.
-       */
-      found->occ += 1;
+    if (occ != NULL) {
+      g_hash_table_insert(params->words, w.ptr,
+                          GSIZE_TO_POINTER(GPOINTER_TO_SIZE(occ) + 1));
       continue;
     }
 
-    /* If the word was not found in the list (has not been seen
-     * before), allocate space for an extra element in the list and
-     * add the word referred to by `w` to it. An array is not ideal,
-     * so a pre-allocating vector would amortize the cost of
-     * reallocations (however the operating system still preallocates
-     * in page sizes so that does amortize the cost to a certain
-     * degree).
-     *
-     * https://github.com/fredmorcos/rdiff/blob/master/vec.h
-     * https://github.com/fredmorcos/rdiff/blob/master/vec.c
-     */
-    struct word *const new = (struct word *)
-      realloc(params->words, (params->n + 1) * sizeof(struct word));
-
-    if (new == NULL) {
-      assert(errno != 0);
-      params->tl_errno = errno;
-      return NULL;
-    }
-
-    params->words = new;
-    memcpy(&params->words[params->n], &w, sizeof(struct word));
-    params->n++;
-
-    /* With a new element in the list, re-sort it by words to take
-     * advantage of the bsearch() lookup. Maybe insertion sort would
-     * be more efficient.
-     */
-    qsort(params->words, params->n, sizeof(struct word), (cmpfunc) wordcmp);
+    g_hash_table_insert(params->words, w.ptr, GSIZE_TO_POINTER(1));
   }
 
   return params;
 }
 
-struct count_params *reduce(const size_t n, struct count_params *const ps) {
-  /* the `reduce` phase: we will use the first accumulated list as the
-   * result, so sort it by word to be able to use bsearch() on it
-   */
-  qsort(ps[0].words, ps[0].n, sizeof(struct word), (cmpfunc) wordcmp);
+void merge (gpointer key, gpointer value, gpointer user_data) {
+  struct count_params *pzero = user_data;
 
-  /* go over the accumulated lists from each chunk (except list 0) */
+  gpointer *occ = g_hash_table_lookup(pzero->words, key);
+
+  if (occ != NULL) {
+    g_hash_table_insert(pzero->words, key,
+                        GSIZE_TO_POINTER(GPOINTER_TO_SIZE(occ) +
+                                         GPOINTER_TO_SIZE(value)));
+    return;
+  }
+
+  g_hash_table_insert(pzero->words, key, GSIZE_TO_POINTER(value));
+}
+
+void reduce(const size_t n, struct count_params *const ps) {
   for (size_t i = 1; i < n; i++) {
-    /* go over each word in the list */
-    for (size_t j = 0; j < ps[i].n; j++) {
-      /* try to find the word in the result list (list 0) */
-      struct word *const found = bsearch(&ps[i].words[j].ptr,
-                                         ps[0].words,
-                                         ps[0].n,
-                                         sizeof(struct word),
-                                         (cmpfunc) wordcmp);
-
-      if (found != NULL) {
-        /* if we found the word, increment its count by the
-         * occurrences of the new word
-         */
-        found->occ += ps[i].words[j].occ;
-      } else {
-        /* if we didnt find it, then it is a new word, make space for
-         * it and insert it into the result list, then sort the
-         * list by words for use with bsearch()
-         */
-        struct word *const new =
-          realloc(ps[0].words, (ps[0].n + 1) * sizeof(struct word));
-
-        if (new == NULL) {
-          warn("cannot allocate space for result list");
-          return NULL;
-        }
-
-        ps[0].words = new;
-        memcpy(&ps[0].words[ps[0].n], &ps[i].words[j], sizeof(struct word));
-        ps[0].n++;
-
-        qsort(ps[0].words, ps[0].n, sizeof(struct word), (cmpfunc) wordcmp);
-      }
-    }
+    g_hash_table_foreach(ps[i].words, merge, &ps[0]);
   }
-
-  /* when we're done reducing, sort the list by occurrences */
-  qsort(ps[0].words, ps[0].n, sizeof(struct word), (cmpfunc) countcmp);
-
-  return ps;
 }
 
 int main(int argc, char *argv[]) {
@@ -575,15 +500,32 @@ int main(int argc, char *argv[]) {
 #endif
 
   /* the resulting list will be in ps[0].words */
-  if (reduce(nts, ps) == NULL) {
-    ret = EX_UNAVAILABLE;
-    goto end_threads;
-  }
+  reduce(nts, ps);
 
 #if !defined(NDEBUG)
   warnx("unique words = %d", g_hash_table_size(ps[0].words));
 #endif
 
+  size_t words_len = 0;
+  struct word *words = malloc(sizeof(struct word) * g_hash_table_size(ps[0].words));
+
+  if (words == NULL) {
+    ret = EX_UNAVAILABLE;
+    goto end_threads;
+  }
+
+  GHashTableIter iter;
+  gpointer key, value;
+
+  g_hash_table_iter_init(&iter, ps[0].words);
+
+  while (g_hash_table_iter_next(&iter, &key, &value)) {
+    words[words_len] = (struct word) { .ptr = key, .occ = GPOINTER_TO_SIZE(value) };
+    words_len++;
+  }
+
+  qsort(words, words_len, sizeof(struct word), (cmpfunc) countcmp);
+
 #if !defined(NDEBUG)
   ti_diff(&ti_red);
   warnx("reduced words in %.2Lfs cpu, %.2Lfs rt, %.2Lfs wc",
@@ -595,18 +537,22 @@ int main(int argc, char *argv[]) {
 #endif
 
   /* print the list of words and their occurrences */
-  for (size_t i = 0; i < ps[0].n; i++) {
-    printf("%s=%zu\n", ps[0].words[i].ptr, ps[0].words[i].occ);
+  for (size_t i = 0; i < words_len; i++) {
+    printf("%s=%zu\n", words[i].ptr, words[i].occ);
   }
 
+  free(words);
  end_threads:
   free(ts);
 
   /* free word lists that have been allocated */
   for (size_t i = 0; i < n; i++) {
-    if (ps[i].words != NULL) {
-      free(ps[i].words);
+    if (ps[i].words == NULL) {
+      break;
     }
+
+    g_hash_table_unref(ps[i].words);
+    /* g_hash_table_destroy(ps[i].words); */
   }
  end_params:
   free(ps);
