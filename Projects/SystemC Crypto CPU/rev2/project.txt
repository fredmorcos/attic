#include <systemc.h>

SC_MODULE (Memory) {
    sc_in<sc_lv<16> > addr;
    sc_in<sc_logic> read, write;

    sc_inout_lv<32> data;

    sc_lv<8> Memory_data[65536];    /* 2^16 items in mem array */

    SC_CTOR(Memory) {
        SC_METHOD(run);
        sensitive << addr << read << write;
    }
};

void Memory::run () {

}

#ifndef MUX_2_1
#define MUX_2_1

#include <systemc.h>

SC_MODULE(Mux_2_1){
	//
	//Ports
	//
	sc_in < sc_logic > select;
	sc_in < sc_lv <32> > i0, i1;
	sc_out < sc_lv <32> > output;

	//
	//The only process
	//
	void multiplex(){

		if(select == 0)
			output.write(i0);
		else
			output.write(i1);
	}//end multiplex

	//Constructor
	SC_CTOR(Mux_2_1){
		SC_METHOD(multiplex);
		sensitive << select << i0 << i1;
	}//end constructor

};//end module
#endif#ifndef MUX_4_1
#define MUX_4_1

#include <systemc.h>

SC_MODULE(Mux_4_1){
	//
	//Ports
	//
	sc_in < sc_logic > k0, k1;
	sc_in < sc_lv <32> > i0, i1, i2, i3;
	sc_out < sc_lv <32> > output;

	//
	//The only process
	//
	void multiplex(){

		//sc_lv <4> kLinesTemp;
		//kLinesTemp = kLines.read();
		
		if(k1 == 0 && k0 == 0)
			output.write(i0);
		else if(k1 == 0 && k0 == 1)
			output.write(i1);
		else if(k1 == 1 && k0 == 0)
			output.write(i2);
		else if(k1 == 1 && k0 == 1)
			output.write(i3);
		else
			output.write(i0);
		}//end multiplex

	//
	//Constructor
	//
	SC_CTOR(Mux_4_1){
		SC_METHOD(multiplex);
		sensitive << k0 << k1 << i0 << i1 << i2 << i3;
		}//end constructor
};//end module
#endif#ifndef MUX_5_1
#define MUX_5_1

#include <systemc.h>

SC_MODULE(Mux_5_1){
	//
	//Ports
	//
	sc_in < sc_logic > k0, k1, k2, k3, k4;
	sc_in < sc_lv <32> > i0, i1, i2, i3, i4;
	sc_out < sc_lv <32> > output;

	//
	//The only process
	//
	void multiplex(){
		
		if(k0 == 1)
			output.write(i0);
		else if(k1 ==1)
			output.write(i1);
		else if(k2 == 1)
			output.write(i2);
		else if(k3 == 1)
			output.write(i3);
		else if(k4 == 1)
			output.write(i4);
		}//end multiplex

	//
	//Constructor
	//
	SC_CTOR(Mux_5_1){
		SC_METHOD(multiplex);
		sensitive << k0 << k1 << k2 << k3 << k4 << i0 << i1 << i2 << i3 << i4;
		}//end constructor
};//end module
#endif#ifndef RFTEST
#define RFTEST

#include <systemc.h>

SC_MODULE (RF_Gen) {
	
	sc_in <bool> clk;
	//sc_out < sc_lv<32> > regOut1, regOut2;
	sc_out < sc_logic > write;
	sc_out < sc_lv <5> > r1Code, r2Code;
	sc_out < sc_lv <32> > inputData;

	void gen() {
		//Store data
		write.write(SC_LOGIC_1);
		r1Code.write(0x0);
		r2Code.write(0x1);
		inputData.write(0xFFFF);
		wait();
		
		//Read
		write.write(SC_LOGIC_0);
		r1Code.write(0x0);
		r2Code.write(0x1);
		wait();
		
		sc_stop();
	}//end gen()

	SC_CTOR (RF_Gen) {
		SC_THREAD (gen);
		sensitive << clk.pos();
	}
};

SC_MODULE (RF_Mon) {
	sc_in <bool> clk;
	sc_in < sc_logic > write;
	sc_in < sc_lv <5> > r1Code, r2Code;
	sc_in < sc_lv <32> > inputData, output1, output2;
	
	void check() {
		cout << "Register File Testbench" << endl;
		cout << "R1\t\tR2\t\tWrite enable\t\tinput data\t\tout1\t\tout2" << endl;
		
		while (1) {
			wait();
			cout << r1Code << "\t" << r2Code << "\t" << write << "\t" << inputData << "\t" << output1 << "\t\t" << output2 << endl;
		}
	}//end check
	
	SC_CTOR(RF_Mon) {
		SC_THREAD(check);
		sensitive << clk.pos();
	}
};

#endif#ifndef Reg_File
#define Reg_File

#include <systemc.h>
#include "Mux_5_1.h"
#include "Mux_2_1.h"
#include "And_1.h"

SC_MODULE(Register_File){
	
	//Ports
	sc_in <bool> readEnable, write;					//writeEnable
	//sc_in <bool> clk;								//optional clock
	sc_in < sc_lv <5> > r1Code, r2Code;				//register number
	sc_in < sc_lv <32> > input;						//input (for writing)
	sc_out <sc_lv <32> > output1, output2;			//value stored in the register

	//Register
	sc_signal <sc_lv <32> > r0, r1, r2, r3, r4;

	void read(){	//Always reads 2 registers
		if(readEnable){
			//First output
			if(r1Code.read()[0] == 1)
				output1.write(r0);

			else if(r1Code.read()[1] == 1)
				output1.write(r1);

			else if(r1Code.read()[2] == 1)
				output1.write(r2);

			else if(r1Code.read()[3] == 1)
				output1.write(r3);

			else if(r1Code.read()[4] == 1)
				output1.write(r4);

			//Second output
			if(r2Code.read()[0] == 1)
				output2.write(r0);

			else if(r2Code.read()[1] == 1)
				output2.write(r1);

			else if(r2Code.read()[2] == 1)
				output2.write(r2);

			else if(r2Code.read()[3] == 1)
				output2.write(r3);

			else if(r2Code.read()[4] == 1)
				output2.write(r4);
		}//end if
	}//end read

	void writeToRegFile(){
		if(write){
			if(r1Code.read()[0] == 1)
				r0.write(input);

			else if(r1Code.read()[1] == 1)
				r1.write(input);

			else if(r1Code.read()[2] == 1)
				r2.write(input);

			else if(r1Code.read()[3] == 1)
				r3.write(input);

			else if(r1Code.read()[4] == 1)
				r4.write(input);
		}//end if
	}//end write

	//Constructor
	SC_CTOR(Register_File){
		SC_METHOD(read);
		sensitive << r1Code << r2Code << readEnable;
		//sensitive << clk.pos();

		SC_METHOD(writeToRegFile);
		sensitive << r1Code << r2Code << write;
		//sensitive << clk.pos();

		//Init registers with 0's
		r0.write(0x0);
		r1.write(0x0);
		r2.write(0x0);
		r3.write(0x0);
		r4.write(0x0);

	}//end constructor
};
#endif
#ifndef _processor_
#define _processor_

#include <systemc.h>
#include "soc_alu.h"

SC_MODULE(Processor) { 

	sc_inout< sc_lv<8> > MDR;
	sc_out< sc_lv<16> > MAR;
	sc_out< sc_logic > memW, memR;
	sc_in<bool> clk;
	
	/* Memory */
	sc_lv<32> [100] memory;
	memory[0].write(00000100010001000100000000000000);
	memory[1].write(00001000010100000100000000000000);
	memory[2].write(00001110000010000010000000000000);
	memory[3].write(00010010000010000010000000000000);
	memory[4].write(00010110000001000001000000000000);
	memory[5].write(01001100010001000000000000000000);
	memory[6].write(01010100010001000000000000000000);
	memory[7].write(01011000010001000000000000000000);
	memory[8].write(01011101000001000000000000000000);
	memory[9].write(01100000010001000000000000000000);
	memory[10].write(11010010000000000001100100000000); //100
	memory[11].write(11000000000000011001000000000000);
	memory[12].write(11100000010000100000000000000000);
	memory[13].write(11100100010001000000000000000000);
	
	/* data - memory is 8 bits wide. */
	sc_signal< sc_lv<32> > IR, AC;
	
	/* address register and program counter */
	sc_signal< sc_lv<16> > PC;
	
	/* note: add is also subtract, branch is branch-equal and
	 * branch-not-equal
	 */
	enum states {fetch1, fetch2, fetch3, decode, load1, load2, load3, load4,
				 store1, store2, store3, store4, sub1, sub2, add1, add2, 
				 and1, and2, or1, or2, xor1, xor2, shl1, shl2, shr1, 
				 shr2, mov1, mov2, loadi, jump, beq1, beq2, bneq1, bneq2 };
	
	sc_signal< states > CS, NS;
	
	/* all operations result */
	sc_signal< sc_lv<32> > result;
	
	/* opcode */
	sc_signal< sc_lv<6> > opcode;
	
	/* ALU K selections and inputs */
	sc_signal <sc_logic> k0_signal, 
						 k1_signal, 
						 k2_signal,
						 k3_signal;
	sc_signal< sc_lv<32> > a_input, b_input, alu_output;
	sc_out< sc_logic> carryFlag, zeroFlag, parityFlag, signFlag;
	/* RF input */
	sc_signal< sc_lv<32> > opr_output;
	sc_lv<32> tmp_val;
	
	sc_lv<32> tmp1, tmp2;			 
	
	void comb();
	void seq();
	void incPC();
	
	ALU32 alu;
	/* Register file */
	RegisterFile reg_file;
	
	SC_CTOR(SimpleProcessor): alu("ALU") {
		PC.write(0xFFFF);
		CS = NS = fetch_1;
		SC_METHOD(comb);
		sensitive << CS;
		SC_METHOD(seq);
	    sensitive << clk.pos();
	    // Sub-modules bindingUDS
	    // Binding register file output with ALU
	    alu.a(a_input);
	    alu.b(b_input);reg_file.
	    alu.out(alu_output);
	    alu.k0(k0_signal);
	    alu.k1(k1_signal);
	    alu.k2(k2_signal);
	    alu.k3(k3_signal);
	    alu.carryFlag(carryFlag);
	    alu.zeroFlag(zeroFlag); 
	    alu.parityFlag(parityFlag); 
	    alu.signFlag(signFlag);
	    
	    reg_file.input(opr_output);
	}
};

void Processor::comb () {
	switch(CS) {
		// fetch
		case fetch1:
			PC.write(PC.read() + 0x1);
			MAR.write(PC.read());
			NS = fetch2;
			break;
		case fetch2:
			memR.write( SC_LOGIC_1 );
			incPC();
			NS = fetch_3;
			break;
		case fetch3:
			IR.write(MDR.read());
			NS = decode;
			break;
		// decode	
		case decode:
			sc_lv<32> irTmp = IR.read();
			if (irTmp.range(31, 26) == 0x1)
				NS = add1;
			else if (irTmp.range(31, 26) == 0x2)
				NS = sub1;
			else if (irTmp.range(31, 26) == 0x3)
				NS = and1;
			else if (irTmp.range(31, 26) == 0x4)
				NS = or1;
			else if (irTmp.range(31, 26) == 0x5)
				NS = xor1;
			else if (irTmp.range(31, 26) == 0x13)
				NS = shl1;
			else if (irTmp.range(31, 26) == 0x15)
				NS = shr1;
			else if (irTmp.range(31, 26) == 0x16)
				NS = move;
			else if (irTmp.range(31, 26) == 0x17)
				NS = load1;
			else if (irTmp.range(31, 26) == 0x18)
				NS = store1;
			else if (irTmp.range(31, 26) == 0x34)
				NS = loadi;
			else if (irTmp.range(31, 26) == 0x30)
				NS = jump;
			else if (irTmp.range(31, 26) == 0x38)
				NS = bq1;
			else if (irTmp.range(31, 26) == 0x39)
				NS = bneq1;
			break;
		/* execution */	
		case add1:
			k3_signal.write(SC_LOGIC_0);
			k2_signal.write(SC_LOGIC_0);
			k1_signal.write(SC_LOGIC_0);
			k0_signal.write(SC_LOGIC_0);
			a_input.write(reg_file.output1);
			b_input.write(reg_file.output2);
			NS = add2;
			break;
		case add2:
			opr_output.write(alu_output);
			NS = fetch1;
			break;
//		case add3:
//			break;
		case sub1:
			k3_signal.write(SC_LOGIC_0);
			k2_signal.write(SC_LOGIC_0);
			k1_signal.write(SC_LOGIC_1);
			k0_signal.write(SC_LOGIC_1);
			a_input.write(reg_file.output1);
			b_input.write(reg_file.output2);
			NS = sub2;
			break;
		case sub2:
			opr_output.write(alu_output);
			NS = fetch1;
			break;
//		case sub3:
//			break;
		case and1:
			k3_signal.write(SC_LOGIC_0);
			k2_signal.write(SC_LOGIC_1);
			k1_signal.write(SC_LOGIC_0);
			k0_signal.write(SC_LOGIC_0);
			a_input.write(reg_file.output1);
			b_input.write(reg_file.output2);
			NS = and2;
			break;
		case and2:
			opr_output.write(alu_output);
			NS = fetch1;
			break;
//		case and3:
//			break;
		case or1:
			k3_signal.write(SC_LOGIC_0);
			k2_signal.write(SC_LOGIC_1);
			k1_signal.write(SC_LOGIC_0);
			k0_signal.write(SC_LOGIC_1);
			a_input.write(reg_file.output1);
			b_input.write(reg_file.output2);
			NS = or2;
			break;
		case or2:
			opr_output.write(alu_output);
			NS = fetch1;
			break;
//		case or3:
//			break;
		case xor1:
			k3_signal.write(SC_LOGIC_0);
			k2_signal.write(SC_LOGIC_1);
			k1_signal.write(SC_LOGIC_1);
			k0_signal.write(SC_LOGIC_0);
			a_input.write(reg_file.output1);
			b_input.write(reg_file.output2);
			NS = xor2;
			break;
		case xor2:
			opr_output.write(alu_output);
			NS = fetch1;
			break;
//		case xor3:
//			break;
		case shl1:
			k3_signal.write(SC_LOGIC_1);
			k2_signal.write(SC_LOGIC_0);
			k1_signal.write(SC_LOGIC_0);
			k0_signal.write(SC_LOGIC_0);
			a_input.write(reg_file.output1);
			b_input.write(reg_file.output2);
			NS = shl2;
			break;
		case shl2:
			opr_output.write(alu_output);
			NS = fetch1;
			break;		
		case shr1:
			k3_signal.write(SC_LOGIC_1);
			k2_signal.write(SC_LOGIC_0);
			k1_signal.write(SC_LOGIC_1);
			k0_signal.write(SC_LOGIC_X);
			a_input.write(reg_file.output1);
			b_input.write(reg_file.output2);
			NS = shr2;
			break;
		case shr2:
			opr_output.write(alu_output);
			NS = fecth1;
			break;
		case mov1:
			tmp_val.write(reg_file.output1);
			NS = mov2;
			break;
		case mov2:
			opr_output.write(tmp_val);
			NS = fetch1;
			break;
		case load1:
			reg_file.readEnable.write(SC_LOGIC_1);
			reg_file.r1Code.write(IR.range(20, 16));
			NS = load2;
			break;
		case load2:
			reg_file.read(0);
			MAR.write(reg_file.output1.read());
			NS = load3;
			break;
		case load3:
			// FIXME
			memory.readEnable.write(SC_LOGIC_1);
			memory.address.write(MAR.read());
			//
			MDR.write(memory.output);
			NS = load4;
			break;
		case load4:
			reg_file.readEnable.write(SC_LOGIC_0);
			reg_file.write.write(SC_LOGIC_1);
			reg_file.r1Code.write(IR.range(25, 21));
			reg_file.input.write(MDR.read());
			NS = fetch1;
			break;
		case store1:
			reg_file.readEnable.write(SC_LOGIC_1);
			reg_file.write.write(SC_LOGIC_0);
			reg_file.r1Code.write(IR.range(20, 16));
			NS = store2;
			break;
		case store2:
			reg_file.read(0);
			MDR.write(reg_file.output1);
			NS = store3;
			break;
		case store3:
			reg_file.r1Code.write(IR.range(25, 21));
			reg_file.read(0);
			MAR.write(reg_file.output1);
			NS = store4;
			break;
		case store4:
			// FIXME
			memory.readEnable.write(SC_LOGIC_0);
			memory.writeEnable.write(SC_LOGIC_1);
			//
			NS = fetch1;
			break;
		case loadi:
			reg_file.readEnable.write(SC_LOGIC_1);
			reg_file.write.write(SC_LOGIC_0);
			reg_file.r1Code.write(IR.range(25, 21));
			reg_file.input.write(IR.range(20, 5));
			reg_file.write();
			NS = fetch1;
			break;
		case jump:
			PC.write(IR.range(25, 10));
			NS = fetch1;
			break;
		case beq1:
			reg_file.readEnable.write(SC_LOGIC_1);
			reg_file.write.write(SC_LOGIC_0);
			reg_file.r1Code.write(IR.range(25, 21));
			reg_file.r2Code.write(IR.range(20, 16));
			reg_file.read(0);
			tmp1.write(reg_file.output1);
			tmp2.write(reg_file.output2);
			NS = beq2;
			break;
		case beq2:
			if (tmp1 == tmp2)
				PC = IR.range(15, 0);
			NS = fetch1;
			break;
		case bneq1:
			reg_file.readEnable.write(SC_LOGIC_1);
			reg_file.write.write(SC_LOGIC_0);
			reg_file.r1Code.write(IR.range(25, 21));
			reg_file.r2Code.write(IR.range(20, 16));
			reg_file.read(0);
			tmp1.write(reg_file.output1);
			tmp2.write(reg_file.output2);
			NS = bneq2;
			break;
		case bneq2:
			if (tmp1 != tmp2)
				PC = IR.range(15, 0);
			NS = fetch1;
			break;
	}
}

void Processor::seq () {
	CS = NS;
	memR.write(SC_LOGIC_0);
	memW.write(SC_LOGIC_0);
}
#endif

/************************************************\
| soc_alu .h                                     |
|                                                |
| SoC Course Project                             |
| Visual Studio 2008                             |
| SystemC 2.2                                    |
| M Affan Zidan                                  |
| 23-4-2009AD                                    |  
\************************************************/

#include<systemc.h>

#pragma region 32-bit Adder
SC_MODULE(Adder32Bit)
{
	// Ports
	sc_in< sc_logic > carryIn;
	sc_in< sc_lv<32> > a, b;
	sc_out< sc_lv<32> >	sum;
	sc_out< sc_logic > carryOut;

	// Processes
	void Add();

	SC_CTOR(Adder32Bit)
	{
		SC_METHOD(Add);
		sensitive<< a << b << carryIn;		
	}
};
#pragma endregion ///// 32-bit Adder /////

#pragma region 4:1 32-bit MUX
SC_MODULE(MUX4to1_32Bit)
{
	// Ports
	sc_in< sc_logic > s0, s1;
	sc_in< sc_lv<32> > in0, in1, in2, in3;
	sc_out< sc_lv<32> >	out;

	// Processes
	void Select();

	SC_CTOR(MUX4to1_32Bit)
	{
		SC_METHOD(Select);
		sensitive<< in0 << in1 << in2 << in3 << s0 << s1;		
	}
};
#pragma endregion ///// 4:2 32-bit MUX /////

#pragma region 32-bit And

SC_MODULE(And32)
{
	// Ports
	sc_in< sc_lv<32> > a, b;
	sc_out< sc_lv<32> > out;

	// Processes
	void and();

	SC_CTOR(And32)
	{
		SC_METHOD(and);
		sensitive<< a << b;
	}
};

#pragma endregion //// 32-bit And ////

#pragma region 32-bit Or

SC_MODULE(Or32)
{
	// Ports
	sc_in< sc_lv<32> > a, b;
	sc_out< sc_lv<32> > out;

	// Processes
	void or();

	SC_CTOR(Or32)
	{
		SC_METHOD(or);
		sensitive<< a << b;
	}
};

#pragma endregion //// 32-bit Or ////

#pragma region 32-bit Xor

SC_MODULE(Xor32)
{
	// Ports
	sc_in< sc_lv<32> > a, b;
	sc_out< sc_lv<32> > out;

	// Processes
	void xor();

	SC_CTOR(Xor32)
	{
		SC_METHOD(xor);
		sensitive<< a << b;
	}
};

#pragma endregion //// 32-bit Xor ////

#pragma region 32-bit Not

SC_MODULE(Not32)
{
	// Ports
	sc_in< sc_lv<32> > a;
	sc_out< sc_lv<32> > out;

	// Processes
	void not();

	SC_CTOR(Not32)
	{
		SC_METHOD(not);
		sensitive<< a;
	}
};

#pragma endregion //// 32-bit Not ////

#pragma region 32-bit Shifter

SC_MODULE(Shifter32)
{
	// Ports
	sc_in< sc_lv<32> > in;  // inputs
	sc_in< sc_logic > leftRight, leftSerialIn, rightSerialIn; // Left_right = 0 for left, 1 for right 
	sc_out< sc_lv<32> > out;  // output
	sc_out< sc_logic > outBit;

	// Processes
	void Shift();
	
	// Constructor
	SC_CTOR(Shifter32)
	{
		SC_METHOD(Shift);
		sensitive << in << leftRight << leftSerialIn << rightSerialIn;
		
	}
};

#pragma endregion //// 32-bit Shifter ///

#pragma region 32-bit Arith Unit
/*
	+---+---+-----------+
	| k1| k0| Operation |
	+---+---+-----------+
	| 0 | 0 |    Add    |
	+---+---+-----------+
	| 0 | 1 |    Inc    |
	+---+---+-----------+
	| 1 | 0 |    Dec    |
	+---+---+-----------+
	| 1 | 1 |    Sub    |
	+---+---+-----------+

Adder inputs:
Xi = Ai
Yi = Bi.K0' + Bi'.K1
Cin = K0
*/

SC_MODULE(Arith32)
{
	// Ports
	sc_in< sc_lv<32> > a, b;  // inputs
	sc_in< sc_logic > k0, k1; // selection lines
	sc_out< sc_lv<32> > out;  // output
	sc_out< sc_logic > carryOut;  // carry out

	// Signals
	sc_signal< sc_lv<32> > bIn;

	// Sub-Modules
	Adder32Bit adder;

	// Processes
	void B();

	// Constructor
	SC_CTOR(Arith32):
	adder("32-bit_Adder")
	{
		// B
		SC_METHOD(B);
		sensitive<< b << k0 << k1;

		// Adder binding
		adder.a(a);
		adder.b(bIn);
		adder.carryIn(k0);
		adder.sum(out);
		adder.carryOut(carryOut);
	}
};

#pragma endregion //// 32-bit Arith Unit ////

#pragma region 32-bit Logic Unit
/*
	+---+---+-----------+
	| k1| k0| Operation |
	+---+---+-----------+
	| 0 | 0 |    And    |
	+---+---+-----------+
	| 0 | 1 |    Or     |
	+---+---+-----------+
	| 1 | 0 |    Xor    |
	+---+---+-----------+
	| 1 | 1 |    Not    |
	+---+---+-----------+
*/

SC_MODULE(Logic32)
{
	// Ports
	sc_in< sc_lv<32> > a, b;  // inputs
	sc_in< sc_logic > k0, k1; // selection lines
	sc_out< sc_lv<32> > out;  // output

	// Sub-Modules
	MUX4to1_32Bit mux;
	And32 and;
	Or32 or;
	Xor32 xor;
	Not32 not;

	// Signals
	sc_signal< sc_lv<32> > andOutput, orOutput, xorOutput, notOutput;
	
	// Constructor
	SC_CTOR(Logic32):
	mux("Logic_MUX"), and("32-bit_And"), or("32-bit_Or"), 
		xor("32-bit_Xor"), not("32-bit_Not")
	{
		//----- Binding -----//
		// And
		and.a(a);
		and.b(b);
		and.out(andOutput);

		// Or
		or.a(a);
		or.b(b);
		or.out(orOutput);

		// Xor
		xor.a(a);
		xor.b(b);
		xor.out(xorOutput);
		
		// Not
		not.a(a);
		not.out(notOutput);

		// MUX
		mux.in0(andOutput);
		mux.in1(orOutput);
		mux.in2(xorOutput);
		mux.in3(notOutput);
		mux.s0(k0);
		mux.s1(k1);
		mux.out(out);
		
	}
};

#pragma endregion //// 32-bit Logic Unit ///

#pragma region 32-bit Shift Unit
/*
	+---+---+-----------+
	| k1| k0| Operation |
	+---+---+-----------+
	| 0 | 0 |    SHL    |
	+---+---+-----------+
	| 0 | 1 |    SAR    |
	+---+---+-----------+
	| 1 | X |    SHR    |
	+---+---+-----------+

*/
SC_MODULE(Shift32)
{
	// Ports
	sc_in< sc_lv<32> > in;  // inputs
	sc_in< sc_logic > k0, k1; 
	sc_out< sc_lv<32> > out;  // output
	sc_out< sc_logic > carryFlag;

	// Sub-Modules
	Shifter32 shifter;

	// Signals
	sc_signal< sc_logic > leftSerialIn, rightSerialIn, leftRight;

	// Processes
	void SInCont();
	
	// Constructor
	SC_CTOR(Shift32):
	shifter("32-bit_Shifter")
	{
		SC_METHOD(SInCont);
		sensitive << in << k0 << k1;

		//---- Binding ----//
		shifter.in(in);
		shifter.out(out);
		shifter.leftRight(leftRight);
		shifter.leftSerialIn(leftSerialIn);
		shifter.rightSerialIn(rightSerialIn);
		shifter.outBit(carryFlag);	
	}
};

#pragma endregion //// 32-bit Shift Unit /////

#pragma region 32-bit ALU

/*
	+---+---+
	| k3| k2|
	+---+---+-----------+
	| 0 | 0 |   Arith   |
	+---+---+-----------+
	| 0 | 1 |   Logic   |
	+---+---+-----------+
	| 1 | 0 |   Shift   |
	+---+---+-----------+
	| 1 | 1 |  not used |
	+---+---+-----------+
*/


SC_MODULE(ALU32)
{
	// Ports
	sc_in< sc_lv<32> > a, b;  // Inputs
	sc_in<sc_logic> k0, k1, k2, k3;  // Controls
	sc_out< sc_lv<32> > out;  // Output
	sc_out< sc_logic> carryFlag, zeroFlag, parityFlag, signFlag;  // Flags

	// Sub-Modules
	Arith32 arith;
	Logic32 logic;
	Shift32 shift;
	MUX4to1_32Bit mux;

	// Processes
	void Flags();

	// Signals
	sc_signal< sc_lv<32> > arithOutput, logicOutput, ShiftOutput;
	sc_signal< sc_logic > arithCarry, shiftCarry;

	// Constructor
	SC_CTOR(ALU32):
	arith("32-bit_Arith_Unit"), logic("32-bit_Logic_Unit"), 
	shift("32-bit_Shift_Unit"), mux("ALU_MUX")
	{
		// Flags
		SC_METHOD(Flags);
		sensitive << out << k2 << k3 << arithCarry << shiftCarry;

		//------ Binding ------//

		// Arith Unit
		arith.a(a);
		arith.b(b);
		arith.k0(k0);
		arith.k1(k1);
		arith.out(arithOutput);
		arith.carryOut(arithCarry);

		// Logic Unit
		logic.a(a);
		logic.b(b);
		logic.k0(k0);
		logic.k1(k1);
		logic.out(logicOutput);

		// Shift Unit
		shift.in(a);
		shift.k0(k0);
		shift.k1(k1);
		shift.out(ShiftOutput);
		shift.carryFlag(shiftCarry);

		// MUX
		mux.in0(arithOutput);
		mux.in1(logicOutput);
		mux.in2(ShiftOutput);
		mux.in3(ShiftOutput);
		mux.s0(k2);
		mux.s1(k3);
		mux.out(out);
	}
};

#pragma endregion //// 32-bit ALU /////************************************************\
| soc_alu .cpp                                   |
|                                                |
| SoC Course Project                             |
| Visual Studio 2008                             |
| SystemC 2.2                                    |
| M Affan Zidan                                  |
| 23-4-2009AD                                    |  
\************************************************/

#include"soc_alu.h"

#pragma region 32-bit Adder
void Adder32Bit::Add()
{
	int i; // counter index
	sc_lv<32> aTemp, bTemp , sumTemp;
	sc_logic cTemp;

    // Read inputs	
	aTemp = a.read(); 
	bTemp = b.read();
	cTemp = carryIn.read();

	for(i=0 ; i<32; i++) // loop on all bits
	{
		sumTemp[i]= aTemp[i] ^ bTemp[i] ^ cTemp; // sum
		cTemp =  (aTemp[i] &  bTemp[i]) | (aTemp[i] & cTemp) | (bTemp[i] & cTemp); // carry
	}

	// write output
	carryOut.write(cTemp);
	sum.write(sumTemp);
	
	return;
}
#pragma endregion ///// 32-bit Adder /////

#pragma region 4:1 32-bit MUX
void MUX4to1_32Bit::Select()
{

	int i; // counter index
	sc_lv<32> temp;

	for(i=0 ; i<32; i++) // loop on all bits
	{
		temp[i] =	(~s0.read() & ~s1.read() & in0.read()[i]) |
					( s0.read() & ~s1.read() & in1.read()[i]) |
					(~s0.read() &  s1.read() & in2.read()[i]) |
					( s0.read() &  s1.read() & in3.read()[i]);
	}
	
	out.write(temp);
	return;
}
#pragma endregion ///// 4:2 32-bit MUX /////

#pragma region 32-bit And
void And32::and()
{
	out = a.read() & b.read();
	return;
}
#pragma endregion ///// 32-bit And /////

#pragma region 32-bit Or
void Or32::or()
{
	out = a.read() | b.read();
	return;
}
#pragma endregion ///// 32-bit Or /////

#pragma region 32-bit Xor
void Xor32::xor()
{
	out = a.read() ^ b.read();
	return;
}
#pragma endregion ///// 32-bit Xor /////

#pragma region 32-bit Not
void Not32::not()
{
	out = ~a.read();
	return;
}
#pragma endregion ///// 32-bit Not /////

#pragma region 32-bit Shifter
void Shifter32::Shift()
{
	sc_lv<32> inTemp, outTemp;
	sc_logic leftRightTemp;

	// Read inputs
	leftRightTemp = leftRight.read();
	inTemp = in.read();

	for(int i = 1; i<=30; i++)
	{
		outTemp[i] = inTemp[i-1] & ~leftRightTemp | // Left
					 inTemp[i+1] &  leftRightTemp;  // Right
	}
	
	outTemp[0]  = rightSerialIn.read() & ~leftRightTemp | // Left
				  inTemp[1]            &  leftRightTemp;   // Right

	outTemp[31] = inTemp[1]            & ~leftRightTemp | // Left
				  leftSerialIn.read()  &  leftRightTemp;   // Right

	// Wight Output
	out.write(outTemp);

	// Output Bit 
	outBit.write( inTemp[31] & ~leftRightTemp |  // Left
				  inTemp[0]  &  leftRightTemp);  // Right

}
#pragma endregion ///// 32-bit Shifter /////

#pragma region 32-bit Arith Unit
void Arith32::B()
{
	int i; // counter index

	sc_lv<32> bTemp = b.read();
    
	for(i=0 ; i<32; i++) // loop on all bits
	{
		bTemp[i] = (bTemp[i] & ~k0.read() ) | (~bTemp[i] & k1.read() );
	}

	// write output
	bIn.write(bTemp);
	
	return;
}
#pragma endregion ///// 32-bit Arith Unit /////

#pragma region 32-bit Shift Unit
void Shift32::SInCont()
{
	rightSerialIn = SC_LOGIC_0;
	leftSerialIn = SC_LOGIC_0 & k1.read() | in.read()[31] & ~k1.read();
	leftRight = k1.read() | k0.read();
}
#pragma endregion ///// Shift Unit /////

#pragma region 32-bit ALU
void ALU32::Flags()
{
	sc_lv<32> outTemp = out.read();

	// Sign Flag
	signFlag.write(outTemp[31] & ~k3.read() & ~k2.read() ); // Arith

	// Zero Flag
	zeroFlag.write(outTemp.nor_reduce() );

	// parity Flag
	parityFlag.write(outTemp.xor_reduce() );

	// Carry Flag
	carryFlag.write( (~k3.read() & ~k2.read() & arithCarry) |  // Arith
					 ( k3.read() & ~k2.read() & shiftCarry) ); // Shift

}
#pragma endregion ///// 32-bit ALU /////