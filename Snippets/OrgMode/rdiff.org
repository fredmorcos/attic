#+title: Documentation for rdiff

#+author: Fred Morcos
#+email:  fred.morcos@gmail.com

#+language: English
#+date:

* License

#+begin_example
  Copyright (c) 2015-2016, Fred Morcos <fred.morcos@gmail.com>

  Permission to use,  copy, modify, and/or distribute  this software for
  any purpose with  or without fee is hereby granted,  provided that the
  above  copyright  notice and  this  permission  notice appear  in  all
  copies.

  THE  SOFTWARE  IS  PROVIDED  "AS  IS" AND  THE  AUTHOR  DISCLAIMS  ALL
  WARRANTIES  WITH  REGARD  TO   THIS  SOFTWARE  INCLUDING  ALL  IMPLIED
  WARRANTIES  OF MERCHANTABILITY  AND  FITNESS. IN  NO  EVENT SHALL  THE
  AUTHOR BE LIABLE  FOR ANY SPECIAL, DIRECT,  INDIRECT, OR CONSEQUENTIAL
  DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING  FROM LOSS OF USE, DATA OR
  PROFITS,  WHETHER  IN  AN  ACTION OF  CONTRACT,  NEGLIGENCE  OR  OTHER
  TORTIOUS  ACTION, ARISING  OUT OF  OR IN  CONNECTION WITH  THE USE  OR
  PERFORMANCE OF THIS SOFTWARE.
#+end_example

* Introduction

rdiff is a UNIX-style daemon and client to synchronize two directories
over a network.  It is very similar to =rsync=.  The difference with
rdiff is that:

+ It is a hobby and an experiment with literate programming.
+ It tries hard to do as little as possible, correctly.
+ It  pushes most of  the work to the  client, making it  suitable for
  low-end backup servers.

** Potential future work

+ Optional authentication, encryption and compression.
+ Optional support for file and directory permissions.

The reasons that I'd like seemingly essential features like encryption
to stay optional in rdiff is that many low-end devices do not offer
any acceleration for their operations.

Another reason is that, as an example, encryption and compression can
be safely implemented as plugins with a very minor constant
performance hit (loading the plugin) and only activated when needed.

** Dependencies

rdiff is written in C as a literate program in Emacs, Org Mode and
Babel.  rdiff tries to depend on pure POSIX semantics (with very few
exceptions) and just =libbsd=.  It should build with the =Makefile=
explained in this document using either =GCC= or =Clang=, other
compilers and non-POSIX platforms are not a primary concern.

** A word about data structure templates

I preferred to use a small  Emacs Lisp snippet to render type-specific
copies of  some of  the data  structures instead of  relying on  the C
preprocessor. The  reason for this  was to avoid wrapping  entire data
structures  and their  corresponding  function implementations  either
inside preprocessor macros or in something similar to the following:

#+begin_src c :tangle no
  #ifndef TYPE
  #error "Type undefined"
  #endif
  ...
  #undef TYPE
#+end_src

The Emacs Lisp  template rendering trick also has  the added advantage
that  type-specific   guards  and   macros  can   still  be   used:  a
=CHAR_LIST_GUARD=  and  =INT_LIST_GUARD=  preprocessor  defines  could
still be rendered from the same list template.

* Implementation

** Templating

The template renderer works by reading  a source code block named $n$,
a list of pairs $(pattern, value)$ and replacing each occurrence of:

+ =<pattern>= in $n$ with =value=.
+ =<patternC>= in $n$ with =Value=.
+ =<patternU>= in $n$ with =VALUE=.

#+name: template
#+headers: :var src="ERROR" :var values="()"
#+begin_src emacs-lisp
  (defun replace-pattern (pair str)
    "Replaces the first element in PAIR with its second one in STR."
    (let* ((first    (car pair))
           (pat-name (symbol-name first))
           (pat      (string-join `("<" ,pat-name ">")))
           (pat-cap  (string-join `("<" ,pat-name "C" ">")))
           (pat-up   (string-join `("<" ,pat-name "U" ">")))
           (value    (symbol-name (cadr pair)))
           (l1  (replace-regexp-in-string pat value str))
           (l2  (replace-regexp-in-string pat-cap (capitalize value) l1)))
      (replace-regexp-in-string pat-up (upcase value) l2)))

  (defun replace-patterns (pairs str)
    "Uses replace-patter to replace each pair in PAIRS in STR accordingly."
    (message str)
    (if pairs
        (let* ((first-pair    (car pairs))
               (rest-of-pairs (cdr pairs))
               (new-str       (replace-pattern first-pair str)))
          (replace-patterns rest-of-pairs new-str))
      str))

  (replace-patterns (read values) src)
#+end_src

** A generic array implementation

#+name: arr
#+begin_example C
  #ifndef <typeU>_ARR_GUARD
  #define <typeU>_ARR_GUARD

  #include <assert.h>
  #include <errno.h>
  #include <stdbool.h>
  #include <stdint.h>
  #include <stdlib.h>
  #include <string.h>

  /* XXX these should go somewhere else */
  #define w_unused_result __attribute__((warn_unused_result))
  #define malloc_like     __attribute__((malloc))

  typedef void (<type>_arr_cb)(<type> *);
  typedef <type>_arr_cb <typeC>ArrCB;

  struct <type>_arr {
    <type> *ptr;
    size_t len;
    size_t alen;
    size_t ilen;
    <typeC>ArrCB *free_cb;
  };

  typedef struct <type>_arr <typeC>Arr;

  #define Auto<typeC>Arr __attribute__((cleanup(<type>_arr_free))) <typeC>Arr

  void <type>_arr_init(<typeC>Arr *const a, const size_t ilen, <typeC>ArrCB *cb)
  {
    (void) memset(a, 0, sizeof(<typeC>Arr));
    a->ilen = ilen;
    a->free_cb = cb;
  }

  void <type>_arr_free(<typeC>Arr *const a)
  {
    if (a->alen == 0) {
      assert(a->len == 0);
      assert(a->ptr == NULL);
      return;
    }

    if (a->free_cb) {
      <type> *p = a->ptr;

      for (size_t i = 0; i < a->len; i++, p++)
        a->free_cb(p);
    }

    assert(a->ptr);
    free(a->ptr);
  }

  #endif  /* <typeU>_ARR_GUARD */
#+end_example

** The daemon

The server side daemon starts

#+begin_src C :tangle rdiff-daemon.c :comments org :noweb yes
  <<template(src=arr, values="((type int))")>>

  #include <stdio.h>

  int main (const int argc, const char **const argv)
  {
    printf("Hello, World!\n");

    AutoIntArr list_of_numbers;

    int_arr_init(&list_of_numbers, 10, NULL);

    return 0;
  }
#+end_src
